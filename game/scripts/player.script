local input = require "game.modules.input"
local anims = require "game.modules.anims"
local broadcast = require "ludobits.m.broadcast"

--the speed of player
go.property("speed", 75)
go.property("punching", false)
go.property("enemies_around", 0)

--input constants
local LEFT = hash("left")
local RIGHT = hash("right")
local UP = hash("up")
local DOWN = hash("down")
local PUNCH = hash("punch")

--collision groups
local WALL = hash("wall")
local ENEMY = hash("enemy")

--constants
local NORTH = vmath.vector3(0, 1, 0)
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local TRIGGER_RESPONSE = hash("trigger_response")
local REMOVE = hash("remove")

local function play_anim(self, anim, f)
	if self.anim ~= anim then
		self.anim = anim
		sprite.play_flipbook("#sprite", anim, f)
	end
end

local function handle_vertical_input(self)
	if input.is_pressed(UP) then
		self.velocity.y = self.speed
	elseif input.is_pressed(DOWN) then
		self.velocity.y = -self.speed
	else
		self.velocity.y = 0
	end
end

local function handle_horizontal_input(self)
	if input.is_pressed(LEFT) then
		self.velocity.x = -self.speed
	elseif input.is_pressed(RIGHT) then
		self.velocity.x = self.speed
	else
		self.velocity.x = 0
	end
end

local function handle_punches(self)
	if input.is_pressed(PUNCH) then
		self.punching = true
	end
end

local function update_position(self, dt)
	local position = go.get_position()
	position = position + self.velocity * dt
	go.set_position(position)
end

local function handle_anim(self)
	if vmath.length(self.velocity) ~= 0 and not self.punching then
		play_anim(self, hash("walk"))
	elseif self.punching then
		self.velocity = vmath.vector3(0)
		play_anim(self, hash("punch2"), function()
			play_anim(self, hash("idle"..tostring(math.random(1, 2))))
			self.punching = false
		end)
	else
		play_anim(self, hash("idle1"))
	end
end

function init(self)
	self.velocity = vmath.vector3(0)
	self.correction = vmath.vector3()

	self.anims = anims.create(self)
	
	input.acquire()
	broadcast.register("remove")
end

function final(self)
	input.release()
	broadcast.unregister("remove")
end

function update(self, dt)
	update_position(self, dt)
	
	handle_horizontal_input(self)
	handle_vertical_input(self)
	handle_punches(self)
	handle_anim(self)

	update_position(self, dt)

	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
		
	--self.anims.update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == CONTACT_POINT_RESPONSE then
		if message.group == WALL then
			local proj = vmath.dot(self.correction, message.normal)
			local comp = (message.distance - proj) * message.normal
			self.correction = self.correction + comp
			go.set_position(go.get_position(id) + comp) --seperate collisions
			proj = vmath.dot(self.velocity, message.normal)
			if proj < 0 then
				self.velocity = self.velocity - proj * message.normal
			end
		end
	elseif message_id == COLLISION_RESPONSE then
		if message.group == ENEMY then
			local punching = go.get(msg.url(nil, message.other_id, "enemy"), "punching")
			if punching then
				--self.velocity.x = 100
			end
		end
	elseif message_id == TRIGGER_RESPONSE then
		if message.enter and message.group == ENEMY then
			local t = go.get(msg.url(nil, message.other_id, "enemy"), "target")
			local added = go.get(msg.url(nil, message.other_id, "enemy"), "added")
			if t == hash("/player") and not added then
				print("here")
				go.set(msg.url(nil, message.other_id, "enemy"), "added", true)
				self.enemies_around = self.enemies_around + 1
			end
		end
	elseif message_id == REMOVE then
		self.enemies_around = self.enemies_around - 1
	end
end

function on_input(self, action_id, action)
	input.on_input(action_id, action)
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
